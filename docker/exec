#!/bin/bash


NAME="base"

FIRST_ARG="$1"
shift
ARGS="$@"

docker_down () {
    COMPOSE_HTTP_TIMEOUT=512 docker compose down
}

docker_up () {
    COMPOSE_HTTP_TIMEOUT=512 docker compose up -d
}

help () {
    echo "build             :  build docker instance"
    echo "up                :  up docker instance"
    echo "down              :  down docker inscance"
    echo "restart           :  down then up docker instance"
    echo "bserver           :  run phoenix dev server"
    echo "btest             :  run test"
    echo "fserver           :  run frontendpack dev server"
    echo "yarn              :  run yarn"
    echo "poetry            :  run poetry command on backend service"
    echo "manage.py         :  run manage.y"
    echo "backend <args>        :  execute random command on backend service, ex: ./exec backend ls"
    echo "backend-upgrade       :  upgrade backend dependencies",
    echo "backend-post-upgrade  :  check outdated backend dependencies"
}

if [ "$FIRST_ARG" == "-h" ]; then
    help
    exit 0
fi

if [ "$FIRST_ARG" == "backend" ] || [ "$FIRST_ARG" == "db" ] || [ "$FIRST_ARG" == "frontend" ]; then
    docker compose exec "$NAME"_"$FIRST_ARG" $ARGS
elif [ "$FIRST_ARG" == "yarn" ]; then
    docker compose exec "$NAME"_frontend yarn $ARGS
elif [ "$FIRST_ARG" == "fserver" ]; then
    docker compose exec "$NAME"_frontend yarn dev
elif [ "$FIRST_ARG" == "fmakemessages" ]; then
    docker compose exec "$NAME"_frontend node_modules/.bin/ttag update src/locale/vi.po src
    docker compose exec "$NAME"_frontend node_modules/.bin/ttag update src/locale/en.po src
elif [ "$FIRST_ARG" == "fdumpmessages" ]; then
    docker compose exec "$NAME"_frontend node_modules/.bin/ttag po2json src/locale/vi.po > ../frontend/src/locale/vi.po.json
    docker compose exec "$NAME"_frontend node_modules/.bin/ttag po2json src/locale/en.po > ../frontend/src/locale/en.po.json
elif [ "$FIRST_ARG" == "ftest" ]; then
    docker compose exec "$NAME"_frontend yarn test $ARGS
elif [ "$FIRST_ARG" == "poetry" ]; then
    docker compose exec "$NAME"_backend poetry $ARGS
elif [ "$FIRST_ARG" == "php" ]; then
    docker compose exec "$NAME"_backend php $ARGS
elif [ "$FIRST_ARG" == "artisan" ]; then
    docker compose exec "$NAME"_backend php artisan $ARGS
elif [ "$FIRST_ARG" == "composer" ]; then
    docker compose exec "$NAME"_backend composer $ARGS
elif [ "$FIRST_ARG" == "dump-autoload" ]; then
    docker compose exec "$NAME"_backend composer dump-autoload
elif [ "$FIRST_ARG" == "makemigrations" ]; then
    docker compose exec "$NAME"_backend poetry run alembic revision -m $ARGS
elif [ "$FIRST_ARG" == "migrate" ]; then
    docker compose exec "$NAME"_backend poetry run alembic upgrade head $ARGS
elif [ "$FIRST_ARG" == "bserver" ]; then
    # docker compose exec "$NAME"_backend poetry run uvicorn main:app --reload --host 0.0.0.0 --port 4000
    docker compose exec "$NAME"_backend php artisan serve --host=0.0.0.0 --port=8000
elif [ "$FIRST_ARG" == "log" ]; then
    docker compose exec "$NAME"_backend tail -f storage/logs/laravel.log
elif [ "$FIRST_ARG" == "up" ]; then
    docker_up
elif [ "$FIRST_ARG" == "down" ]; then
    docker_down
elif [ "$FIRST_ARG" == "restart" ]; then
    docker_down
    docker_up
elif [ "$FIRST_ARG" == "build" ]; then
    docker compose build --no-cache
elif [ "$FIRST_ARG" == "pg_dump" ]; then
    docker compose exec "$NAME"_db pg_dump $ARGS
    # ./exec pg_dump -U username db_name > db.sql
elif [ "$FIRST_ARG" == "clean-db" ]; then
    docker_down
    rm -rf dbdata
    mkdir dbdata
    docker_up
    docker compose exec "$NAME"_backend poetry run python manage.py migrate
    docker compose exec "$NAME"_backend poetry run python manage.py cmd_account_seeding
elif [ "$FIRST_ARG" == "btest" ]; then
    if [[ $1 ]]; then
        docker compose exec "$NAME"_backend poetry run python manage.py test $1
    else
        docker compose exec "$NAME"_backend poetry run python manage.py test
    fi
else
    echo "Invalid argument, please use following arguments:"
    echo "-------------------------------------------------"
    help
fi
